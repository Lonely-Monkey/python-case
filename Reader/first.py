# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import urllib.request
from PyQt5 import QtCore, QtGui, QtWidgets
import os
import time
import sys
from bs4 import BeautifulSoup
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QMessageBox, QFileDialog


class Ui_MainWindow(object):

    #选择保存路径
    def msg(self):
        try:
            #dir_path为选择的文件夹绝对路径，第二形参为对话框标题，第三个为对话框打开后默认的路径
            self.dir_path = QFileDialog.getExistingDirectory(None, "选择路径", os.getcwd())
            #显示选择的保存路径
            self.lineEdit.setText(self.dir_path)
        except Exception as e:
            print(e)

    #抓取数据
    def getData(self, url, path):
        #获取BeautifulSoup对象
        soup = self.urlTosoup(url)
        #获取文章列表
        link = soup.select('.booklist a')
        #设置文章存储路径
        path = path + "\\" + self.date + "\\"
        #判断路径是否存在
        if not os.path.isdir(path):
            #创建路径
            os.mkdir(path)
        #遍历文章列表
        for item in link:
            #获取遍历到的具体文章地址
            articleUrl = self.baseurl + item['href']
            #生成BeautifulSoup对象
            articleSoup = self.urlTosoup(articleUrl)
            #获取文章标题
            title = str(articleSoup.find("h1")).lstrip("<h1>").rstrip("</h1>")
            #获取文章作者
            author = str(articleSoup.find(id="pub_date")).strip()
            #设置文章保存路径
            fileName = path + title + ".txt"
            #打开或者创建文件
            newFile = open(fileName, "w")
            #向文件中写入标题并换行
            newFile.write("<<" + title + ">>\n\n")
            #向文件中写入作者并换行
            newFile.write(author + "\n\n")
            #获取文章所有内容
            content = articleSoup.select(".blkContainerSblkCon p")
            #遍历获取到的内容
            for c in content:
                #获取文章内容
                text = c.text
                #向文件写入内容
                newFile.write(text)
            #关闭文件
            newFile.close()
        QMessageBox.Information(None, "提示", self.date + "的读者文章保存完成", QMessageBox.Ok)


    #从网页提取数据
    def urlTosoup(self, url):
        #打开url地址
        response = urllib.request.urlopen(url)
        #读取网页内容
        html = response.read()
        #创建BeautifulSoup对象，它可以从HTML或XML文件中提取数据
        soup = BeautifulSoup(html, "html.parser")
        return soup

    #将文件显示在table中
    def bindTable(self):
        #遍历文件列表
        for i in range(0, len(self.list)):
            #添加新行
            self.tabWidget.insertRow(i)
            #设置第一列的值为期数
            self.tabWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(self.lineEdit_2.text()))
            #设置第二列的值为文件名
            self.tabWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(self.list[i]))

    #将文件显示在list列表中
    def bindList(self):
        #遍历文件列表
        for i in range(0, len(self.list)):
            #创建列表项
            self.item = QtWidgets.QListWidgetItem(self.listWidget)
            #设置列表项图标
            self.item.setIcon(QtGui.QIcon('note.ico'))
            #截取字符串，显示5个字符
            self.item.setText(str(self.list[i])[0:5] + '...')
            #设置提示文字
            self.item.setToolTip(self.list[i])
            #设置选中与否
            self.item.setFlags(QtCore.Qt.ItemIsSelecttable | QtCore.Qt.ItemIsEnabled)


    #获取所有文件
    def getFiles(self):
        #列出文件夹下所有的目录和文件
        self.list = os.listdir(self.lineEdit.text() + '\\' + self.lineEdit_2.text())

    #抓取所有数据
    def getDatas(self):
        try:
            #无限循环
            while True:
                #记录用户选择的期数
                self.date = self.lineEdit_2.text()
                #设置文章初始地址
                self.baseurl = 'http://www/52duzhe.com/' + self.date.replace('-', '-') + '/'
                #获取文件列表地址
                urlList = self.baseurl + 'indec.html'
                #执行主方法
                self.getData(urlList, self.lineEdit.text())
        except Exception as e:
            print(e)
        #获取所有文件
        self.getFiles()
        #对列表进行绑定
        self.bindList()
        #对表格进行绑定
        self.bindTable()

    #列表单击方法，用来打开选中的项
    def itemClick(self, item):
        os.startfile(self.lineEdit.text() + '\\' + self.lineEdit_2.text() + '\\' + item.toolTip())

    #表格单击方法，用来打开选中的项
    def tableClick(self, item):
        os.startfile(self.lineEdit.text() + '\\' + self.lineEdit_2.text() + '\\' + item.text())


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        # 设置“抓取设置”区域
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 431, 121))
        self.groupBox.setObjectName("groupBox")
        # 对“设置期数”控件进行设置
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(20, 30, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        # 对“选择路径”标签进行设置
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(20, 60, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        # 对“选择保存路径”文本框进行设置
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(160, 60, 201, 20))
        self.lineEdit.setObjectName("lineEdit")
        # 对“设置期数”控件进行设置
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(160, 30, 100, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit_2.setFont(font)
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(265, 31, 150, 16))
        # self.label_3.setObjectName("label_3")
        # 对“确定”按钮进行设置
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(340, 90, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton.setFont(font)
        self.pushButton.setMouseTracking(False)
        self.pushButton.setAutoFillBackground(True)
        self.pushButton.setStyleSheet("")
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")
        # 对“选择”按钮进行设置
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(370, 60, 41, 23))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setMouseTracking(False)
        self.pushButton_2.setAutoFillBackground(True)
        self.pushButton_2.setFlat(False)
        self.pushButton_2.setObjectName("pushButton_2")
        # 对“选项卡”进行设置
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 140, 431, 355))
        self.tabWidget.setObjectName("tabWidget")
        # 设置“选项卡”的第一个tab，加入QTabWidget表格
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        # 对QTabWidget表格进行设置
        self.tableWidget = QtWidgets.QTableWidget(self.tab)
        self.tableWidget.setGeometry(QtCore.QRect(8, 5, 410, 295))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        # 设置第一列宽度
        self.tableWidget.setColumnWidth(0,130)
        # 设置自动填充容器
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        # 设置垂直滚动条
        self.tableWidget.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy()) # 版本api调整
        self.tabWidget.addTab(self.tab, "")
        # 设置“选项卡”的第二个tab，加入QTabWidget列表
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.listWidget = QtWidgets.QListWidget(self.tab_2)
        self.listWidget.setGeometry(QtCore.QRect(8, 5, 410, 295))
        font = QtGui.QFont()
        font.setFamily("Microsoft YaHei UI Light")
        self.listWidget.setFont(font)
        self.listWidget.setViewMode(QtWidgets.QListView.IconMode) # 版本api调整
        self.listWidget.setObjectName("listWidget")
        self.tabWidget.addTab(self.tab_2, "")
        self.listWidget.setIconSize(QtCore.QSize(72,72)) # 图标大小
        self.listWidget.setMaximumHeight(800) # 最大宽度
        self.listWidget.setSpacing(12) # 间距大小
        # 显示垂直滚动条
        self.listWidget.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy()) # 版本api调整
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #为选择按钮绑定事件
        self.pushButton_2.clicked.connect(self.msg())
        #为确定按钮绑定单击事件
        self.pushButton.clicked.connect(self.getDatas())
        #绑定列表单击方法
        self.listWidget.itemClicked.connect(self.itemClick())
        #绑定表格单击方法
        self.tabWidget.itemClicked.connect(self.tableClick())


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "RCQ读者书库--阅读使人进步"))
        self.groupBox.setTitle(_translate("MainWindow", "抓取设置")) # 设置分组匡文本
        self.pushButton.setText(_translate("MainWindow", "确定"))  #设置按钮文本
        self.label.setText(_translate("MainWindow", "请选择抓取期数：")) # 设置标签文本
        # 设置默认路径为当前路径
        self.lineEdit.setText(_translate("MainWindow", os.getcwd()))
        # 获取当前年份和月份
        strDate = (str)(time.localtime().tm_year) + "-" + (str)(time.localtime().tm_mon)
        self.lineEdit_2.setText(_translate("MainWindow", strDate)) # 设置默认期数
        # 设置标签文本
        self.label_2.setText(_translate("MainWindow", "请选择保存路径："))
        # 设置标签文本
        self.label_3.setText(_translate("MainWindow", "(期数范围为0-24)"))
        # 设置按钮文本
        self.pushButton_2.setText(_translate("MainWindow", "选择"))
        item = self.tableWidget.horizontalHeaderItem(0)  # 获取表格第一列
        item.setText(_translate("MainWindow", "期数"))   # 设置表格第一列的标题
        item = self.tableWidget.horizontalHeaderItem(1)  # 获取表格的第二列
        item.setText(_translate("MainWindow", "名称"))   # 设置表格第二列的标题
        # 设置第一个选项卡的标题
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "按期数显示"))
        # 设置第二个选项卡的标题
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "按名称显示"))

# 主方法，程序从此处启动pyqt5的窗体
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    # 创建窗体对象
    MainWindow = QtWidgets.QMainWindow()
    # 创建pyqt5的窗体对象
    ui = Ui_MainWindow()
    # 调用pyqt5窗体的方法对窗体对象进行初始化设置
    ui.setupUi(MainWindow)
    # 显示窗体
    MainWindow.show()
    # 程序关闭时退出进程
    sys.exit(app.exec_())
